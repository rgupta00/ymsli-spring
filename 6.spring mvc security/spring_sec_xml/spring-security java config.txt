
Spring security 
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
	=> project setup for spring mvc 
	=> security hello world
	=> password hashing
	=> problem of back button
	=> custom login/logout form
	=> method level security

=> jdbc form based method level security and int with account application


--------------------------------------
	project setup for spring mvc 
---------------------------------------




@Configuration // replacement of xml file, telling spring it is configuration file
@ComponentScan(basePackages={"com"})
@EnableWebMvc
public class AppConfig extends WebMvcConfigurerAdapter{

    @Bean
    public InternalResourceViewResolver getInternalResourceViewResolver() {
        InternalResourceViewResolver resolver = new InternalResourceViewResolver();
        resolver.setPrefix("/WEB-INF/pages/");
        resolver.setSuffix(".jsp");
        return resolver;
    }

	@Override
	public void addResourceHandlers(ResourceHandlerRegistry registry) {
		 // Don't forget the ending "/" for location or you will hit 404.
	    registry.addResourceHandler("/resources/**").addResourceLocations("/resources/");
	 
	}
}





public class WebInitilizer extends
		AbstractAnnotationConfigDispatcherServletInitializer {

	@Override
	protected Class<?>[] getRootConfigClasses() {

		return null;
	}

	@Override
	protected Class<?>[] getServletConfigClasses() {

		return new Class[]{AppConfig.class};
	}

	@Override
	protected String[] getServletMappings() {

		return new String[]{"/"};
	}

}



@Controller
@RequestMapping("/")
public class HelloWorldController { 
	    @RequestMapping(method = RequestMethod.GET)
	    public String sayHello(ModelMap model) {
	        model.addAttribute("greeting", "Hello World from Spring 4 MVC");
	        return "welcome";
	    }
 }














-------------------------------
	security hello world
--------------------------------

Steps:1 

 configure front controller and security filter in web.xml
 - -------------------------------------------

<!-- Spring MVC -->
	<servlet>
		<servlet-name>dispatcher</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<load-on-startup>1</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>dispatcher</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>

	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>

	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>
			/WEB-INF/dispatcher-servlet.xml,
			/WEB-INF/spring-security.xml
		</param-value>
	</context-param>

	<!-- Spring Security -->
	<filter>
		<filter-name>springSecurityFilterChain</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
	</filter>

	<filter-mapping>
		<filter-name>springSecurityFilterChain</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>


 step 2: mvc-dispatcher-servlet.xml
---------------------------------------

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc 
	http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context.xsd">

	<context:component-scan base-package="com.controllers" />

	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix">
			<value>/WEB-INF/views/</value>
		</property>
		<property name="suffix">
			<value>.jsp</value>
		</property>
	</bean>

</beans>



 step 3: spring security file
 -------------------------------------------

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd">

 <security:http use-expressions="true">
        <security:intercept-url pattern="/**" access="isAuthenticated()"/> 
        <!-- this means all URL in this app will be checked if user is authenticated -->
        
        <security:form-login/> 
        <!-- We will just use the built-in form login page in Spring -->
        
        <security:logout logout-url="/logout" logout-success-url="/"/> 
        <!-- the logout url we will use in JSP -->
    </security:http>
    
    <security:authentication-manager>
        <security:authentication-provider>
            <!-- Normally, in this part, you will declare the source of your users
                 But for simplicity, we will hard-code the users. This is very useful while testing setup -->
            <security:user-service>
                <security:user name="foo" password="foo" authorities="Admin, User"/>
                <security:user name="bar" password="bar" authorities="User"/>
            </security:user-service>
        </security:authentication-provider>
    </security:authentication-manager>	
</beans>


 step 4: hello world controller:
---------------------------------



@Controller
@RequestMapping("/")
public class HelloWorldController {

	@RequestMapping(method = RequestMethod.GET)
	public String sayHello(ModelMap model, Principal principal ) {
		String name = principal.getName();
		model.addAttribute("greeting", "Hello World from Spring 4 MVC");
		return "welcome";
	}
	

}



 



------------------------------
	Password hashing 
------------------------------

	Very bad!  <security:user name="foo" password="foo" authorities="Admin, User"/>



	Step 1: create an hashcode using BCryptPasswordEncoder
	----------------------------------------------------

		public class Main {
		
			public static void main(String[] args) {
				BCryptPasswordEncoder encoder=new BCryptPasswordEncoder(12);
				System.out.println(encoder.encode("foo"));
				
			}
		}


	

	Step 2: put in spring configuration file:

	
	<bean id="encoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder">
		<constructor-arg value="12" />
	</bean>




	step 3: import spring configuration file in security configuration file:

	<import resource="dispatcher-servlet.xml"/>



	step 4:update auth mgr


		<security:authentication-manager>
		        <security:authentication-provider>
		            <!-- Normally, in this part, you will declare the source of your users
		                 But for simplicity, we will hard-code the users. This is very useful while testing setup -->
		            <security:password-encoder ref="encoder"/>
		            <security:user-service>
		                <security:user name="foo" password="$2a$12$HXqTFbPBa8wfo63ywJ2Tee/YtfduQObi1FCXuxahmAkfdIGS3VHue" authorities="Admin, User"/>
		                <security:user name="bar" password="bar" authorities="User"/>
		            </security:user-service>
		        </security:authentication-provider>
		    </security:authentication-manager>	




-----------------------------------------
	problem of back button
--------------------------------------------

<!-- To prevent browser's back button on displaying secured resource after logout -->
	<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
	    <property name="cacheSeconds" value="0" />
	</bean>





-----------------------------------------
	Another example security
--------------------------------------------


@Controller
public class MyController {

	@RequestMapping(value={"","/","/index"})
	public String index(){
		return "index";
	}
	
	@RequestMapping(value={"/user"})
	public String user(){
		return "users";
	}
	
	@RequestMapping(value={"/user/admin"})
	public String admin(){
		return "admin";
	}
	
}



<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd">
		
		
		<security:http auto-config="true">
			<security:intercept-url pattern="/user/admin**" access="ROLE_ADMIN" />
			<security:intercept-url pattern="/user**" access="ROLE_USER" />
			<security:intercept-url pattern="/**" access="ROLE_ANONYMOUS" />
		</security:http>
		
		
		<security:authentication-manager>
		<security:authentication-provider>
			<security:user-service>
				<security:user name="admin" password="password" authorities="ROLE_USER,ROLE_ADMIN" />
				<security:user name="user" password="password" authorities="ROLE_USER" />
			</security:user-service>
		</security:authentication-provider>
	</security:authentication-manager>
	
</beans>


spring security: basics security with custom form + password hashing+ jdbc relem

spring security : fixed value!
---------------------------------------
	custom login/logout form
--------------------------------------


step 1: create an custom login form

<%@taglib uri="http://www.springframework.org/tags/form" prefix="form"%>
<%@taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
<html>

 <head>
   <title>Spring Security Login page</title>
 </head>
 
<h2>Custom Login Form</h2>
  <c:if test="${not empty SPRING_SECURITY_LAST_EXCEPTION}">
      <font color="red">
        Your login attempt was not successful due to 
        <c:out value="${SPRING_SECURITY_LAST_EXCEPTION.message}"/>.
      </font>
    </c:if>
    
  <form:form action='j_spring_security_check' method='POST'>
	 <table>
	    <tr>
	      <td>User Name:</td>
	      <td><input type='text' name='j_username' value=''></td>
	    </tr>
	    <tr>
	      <td>Password:</td>
	      <td><input type='password' name='j_password'/></td>
	    </tr>
	    
	    <tr>
	      <td colspan='2'>
	        <input name="submit" type="submit" value="Login"/></td>
	    </tr>
	  </table>
  </form:form>
  
</body>






step 2: create an /login mappend controller method


@Controller
@RequestMapping("/")
public class HelloWorldController {

	@RequestMapping(method = RequestMethod.GET)
	public String sayHello(ModelMap model) {
		model.addAttribute("greeting", "Hello World from Spring 4 MVC");
		return "welcome";
	}
	
	@RequestMapping(value="/login")
	public String login() {
		return "login";
	}

}


step 3: allow everybody to access /login url

<security:http pattern="/login" security="none"/>



step 4: change  <security:form-login login-page="/login" default-target-url="/" authentication-failure-url="/login"/> 



	<security:http pattern="/login" security="none" />
	<security:http use-expressions="true">
		<security:intercept-url pattern="/**" access="isAuthenticated()" />
		
		<security:form-login login-page="/login" default-target-url="/" authentication-failure-url="/login" />
		
		<security:logout logout-url="/logout" logout-success-url="/" />
		
	</security:http>


	<security:authentication-manager>
		<security:authentication-provider>
			<security:user-service>
				<security:user name="foo" password="foo" authorities="Admin, User" />
				<security:user name="bar" password="bar" authorities="User" />
			</security:user-service>
		</security:authentication-provider>
	</security:authentication-manager>













<context:component-scan base-package="com" />
	<context:annotation-config />
	<mvc:annotation-driven />

	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix">
			<value>/WEB-INF/views/</value>
		</property>
		<property name="suffix">
			<value>.jsp</value>
		</property>
	</bean>







Spring sec:
------------
url 
method 
object




-----------------------------------------
	method level security example
--------------------------------------------

There are four ways to implement method level security.
----------------------------------------
	=> Annotate method using @Secured

	=> Annotate method using JSR-250 @RolesAllowed

	=> Use Spring's Pre and Post invocation Annotations

	=> Match method using Pointcuts



Annotate method using @Secured
-----------------------------
@Controller
@RequestMapping("/")
public class LoginController {
	@Autowired
	public UserService userService;
	@RequestMapping(method = RequestMethod.GET)
	public String success(ModelMap map) {		
		userService.addUser("ABC", "abc");
		userService.deleteUser("ABC");
		map.addAttribute("msg", "Done Successfully");
		return "success";
 
	}  
	
	@RequestMapping(value="/logout")
	public String logout() {
		return "logout";
	}

}




public interface UserService {
	
	@Secured ({"ROLE_USER", "ROLE_ADMIN"})
	public void addUser(String name, String pwd);
	
	@Secured("ROLE_ADMIN")
	public void deleteUser(String name);
	
}



public class UserServiceImp implements UserService {
	@Override
	public void addUser(String name, String pwd) {
		System.out.println("user added");
	}
	@Override
	public void deleteUser(String name) {
		System.out.println("user deleted");
	}
}




	<security:http use-expressions="true">
		<security:intercept-url pattern="/**" access="isAuthenticated()" />
		<security:form-login />
		<security:logout logout-url="/logout" logout-success-url="/" />
	</security:http>
	<security:authentication-manager>
		<security:authentication-provider>
			<security:user-service>
				<security:user name="foo" password="foo" authorities="ROLE_ADMIN" />
				<security:user name="bar" password="bar" authorities="ROLE_USER" />
			</security:user-service>
		</security:authentication-provider>
	</security:authentication-manager>

	<security:global-method-security secured-annotations="enabled" />

	<bean name="userService" class="com.UserServiceImp" />



































Spring security basic jdbc:
----------------------------

creating table;
---------------
CREATE TABLE `users` (
	`username` VARCHAR(50) NOT NULL,
	`password` VARCHAR(50) NOT NULL,
	`enabled` TINYINT(1) NOT NULL,
	PRIMARY KEY (`username`)
);
CREATE TABLE `authorities` (
	`username` VARCHAR(50) NOT NULL,
	`authority` VARCHAR(50) NOT NULL,
	UNIQUE INDEX `ix_auth_username` (`username`, `authority`),
	CONSTRAINT `fk_authorities_users` FOREIGN KEY (`username`) REFERENCES `users` (`username`)
);





	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <property name="url" value="jdbc:mysql://localhost:3306/yms1"/>
        <property name="username" value="root"/>
		<property name="password" value="root" />
	</bean>

	<security:http auto-config="true">
		<security:intercept-url pattern="/**" access="ROLE_ADMIN" />
	</security:http>

	<security:authentication-manager>
		<security:authentication-provider>
			 <security:jdbc-user-service data-source-ref="dataSource" authorities-by-username-query="SELECT username, authority FROM authorities WHERE username = ?"
            users-by-username-query="SELECT username, password, enabled FROM users WHERE username = ?"/>
		</security:authentication-provider>
	</security:authentication-manager>










-----------------------------------
	tomcat basic security
-------------------------------------


mentions users in tomcat-users.xml

<role rolename="tomcat"/>
  <role rolename="role1"/>
  <role rolename="employee"/>
  <user username="concretepage" password="concretepage" roles="employee"/>
  <user username="tomcat" password="tomcat" roles="tomcat"/>
  <user username="both" password="tomcat" roles="tomcat,role1"/>
  <user username="role1" password="tomcat" roles="role1"/> 





Define in web.xml of project:
-------------------------------

<!--Defines Security Constraint -->
    <security-constraint>
        <display-name>JSP Demo Constraint</display-name>
        <web-resource-collection>
            <web-resource-name>cp</web-resource-name>
            <description/>
            <url-pattern>/*</url-pattern>
        </web-resource-collection>
        <auth-constraint>
            <description/>
            <role-name>employee</role-name>
        </auth-constraint>
    </security-constraint>




<!--Defines Login Config -->
    <login-config>
        <auth-method>FORM</auth-method>
        <realm-name>file</realm-name>
        <form-login-config>
            <form-login-page>/login.jsp</form-login-page>
            <form-error-page>/error.jsp</form-error-page>
        </form-login-config>
    </login-config>



<!--Defines Security Role -->
    <security-role>
        <description/>
        <role-name>employee</role-name>
    </security-role>



login.jsp

<form name="loginForm" method="POST" action="j_security_check">
            <p>User name: <input type="text" name="j_username" size="20"/></p>
            <p>Password: <input type="password" size="20" name="j_password"/></p>
            <p>  <input type="submit" value="Submit"/></p>
        </form>    




logout.jsp

<%
session.invalidate();
response.sendRedirect("index.jsp");
%>



error.jsp

 <h3>Login Error</h3>   
       <a href="index.jsp">Click to Login Again</a>  


index.jsp

<h1>You have successfully logged-in</h1>
<a href="logout.jsp" >Click to Logout </a>
















http://www.techcrony.info/2008/10/09/nitingautam/spring-cross-site-scripting-xss-issues-solution/
http://www.concretepage.com/spring/spring-security/spring-security-login-example-database
